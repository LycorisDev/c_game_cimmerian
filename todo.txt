Notes:
- The minimum window size is 128x128 while the maximum is the monitor size.
- Use a value inferior or equal to 0.1 as the aspect ratio to express "whatever 
the monitor's aspect ratio is". For example 0 or -1.

--------------------------------------------------------------------------------

[DEFAULT MAP]

NSEW: Player start position
D: Door (simple door)
G: Goal (victory)
P: Portal (to another map)
0: Ground
1-9: Type of ordinary walls
Whitespace: Empty space

[CEIL-FLOOR MAP]

0-9: Pair of ceiling and floor textures (null is possible)
Whitespace: Null for sure

[PORTAL DETAIL]

P N X, Y path_to_dest_map
P N X, Y path_to_dest_map N X, Y

-> First cardinal: the face of the cell used as portal.
-> First XY (int): the location of the portal cell in the current map.
-> String: the file path to the destination map (can be current).
	If the name is literally "null", this leads to a dummy map meant to trigger 
	a game over.
-> [Optional] The destination's cardinal direction + new pos XY (int).
The new pos can be the location of another portal, it's safe.
If not indicated, the map's default start pos and direction will be used.

--------------------------------------------------------------------------------

PROBLEM: RESOLUTION GREATER THAN 640x360

-> MLX Lib: Why does hiding the cursor cause a leak? Once fixed, hide the 
cursor to be like the GL version.
-> Understand why there's a dramatic FPS drop in both versions with a x2 or x3 
resolution (x1 is 640x360). Is it just because more rays are being casted?

	* Make sure the GUI is good in the following aspect ratios: 1:1, 3:2, 4:3, 
	10:9 and 16:9.
	* Need to adapt the font size, the icon size and the cursor size, then GUI 
	is done.
	* Need to adapt background/skybox. Consider generating the skybox, and 
	maybe it's the opportunity to have a proper one, with like mountains and 
	stuff remaining where they should in the world.

--------------------------------------------------------------------------------

BACKBURNER

-> MLX Lib: There can be a flicker when resizing the window, and it seems to be 
due to the absence of a double buffer in the MLX. Consider implementing it, 
instead of asking the user to create two frames. The upscaling feature could 
even be done in the MLX. Basically take inspiration from OpenGL. And about the 
upscaling, could this possibly be done by the graphics card? I can give it the 
reference frame, the offset and size of the upscaled frame within the window, 
as well as the upscaling factor. These values are computed only when the window 
is resized, so they can be cached.
